version: "3.9"

#
# ATLAS
#

x-default-environment: &default_environment
  TZ: ${TZ}
  PUID: ${PUID}
  PGID: ${PGID}

x-default-task: &default_task
  environment:
    <<: *default_environment
  network_mode: none
  restart: "no"

x-default-service: &default_service
  environment: &default_service_environment
    <<: *default_environment
    UMASK: ${UMASK}
  restart: always

x-internal-network: &internal_network
  driver_opts:
    com.docker.network.bridge.enable_ip_masquerade: "false"

services:

  #
  # Services.
  #

  #  adminer:
  #    image: adminer
  #    container_name: adminer
  #    networks:
  #      - egress
  #      - authelia_db
  #      - nextcloud_db
  #      - teamspeak_db
  #    ports:
  #      - "8080:8080"

  atlas-init:
    <<: *default_task
    image: atlas/atlas-init
    build: ./images/atlas-init
    container_name: atlas-init
    volumes:
      - authelia:/config/authelia:z
      - ldap:/config/ldap:z
      - traefik:/config/traefik:z

  authelia:
    <<: *default_service
    image: authelia/authelia:${AUTHELIA}
    container_name: authelia
    depends_on:
      atlas-init:
        condition: service_completed_successfully
      authelia-db:
        condition: service_started
    networks:
      - auth
      - authelia_db
      - mail
      - proxy
    environment:
      <<: *default_service_environment
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_URL: ldaps://ldap
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER: cn=auth,dc=domain,dc=com
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN: dc=domain,dc=com
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE: /run/secrets/ldap_auth
      AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE: /run/secrets/authelia_identity_hmac
      AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY_FILE: /run/secrets/authelia_identity_key
      AUTHELIA_JWT_SECRET_FILE: /run/secrets/authelia_jwt
      AUTHELIA_NOTIFIER_SMTP_HOST: proton-bridge
      AUTHELIA_NOTIFIER_SMTP_PORT: 25
      AUTHELIA_NOTIFIER_SMTP_USERNAME: admin@${DOMAIN}
      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /run/secrets/protonmail_password_bridge
      AUTHELIA_NOTIFIER_SMTP_SENDER: "SSO <admin@${DOMAIN}>"
      AUTHELIA_SESSION_DOMAIN: ${DOMAIN}
      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/authelia_session
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/authelia_storage
      AUTHELIA_STORAGE_MYSQL_HOST: authelia-db
      AUTHELIA_STORAGE_MYSQL_DATABASE: authelia
      AUTHELIA_STORAGE_MYSQL_USERNAME: authelia
      AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE: /run/secrets/authelia_db
      AUTHELIA_TOTP_ISSUER: ${DOMAIN}
    volumes:
      - authelia:/config:z
    secrets:
      - authelia_db
      - authelia_identity_hmac
      - authelia_identity_key
      - authelia_jwt
      - authelia_session
      - authelia_storage
      - ldap_auth
      - protonmail_password_bridge
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`sso.${DOMAIN}`)"
      - "traefik.http.routers.authelia.entryPoints=https"
      - "traefik.http.routers.authelia.middlewares=secured"
      - "traefik.http.services.authelia.loadBalancer.server.port=9091"

  authelia-db:
    <<: *default_service
    image: linuxserver/mariadb:${MARIADB}
    container_name: authelia-db
    networks:
      - authelia_db
    environment:
      <<: *default_service_environment
      MYSQL_DATABASE: authelia
      MYSQL_USER: authelia
      FILE__MYSQL_PASSWORD: /run/secrets/authelia_db
      FILE__MYSQL_ROOT_PASSWORD: /run/secrets/authelia_db
    volumes:
      - authelia_db:/config:z
    secrets:
      - authelia_db
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  inadyn:
    <<: *default_service
    image: atlas/inadyn:${INADYN}
    build: ./images/inadyn
    container_name: inadyn
    networks:
      - egress
    secrets:
      - inadyn

  ldap:
    <<: *default_service
    image: atlas/ldap:${LDAP}
    build: ./images/ldap
    container_name: ldap
    depends_on:
      atlas-init:
        condition: service_completed_successfully
    networks:
      - auth
    environment:
      <<: *default_service_environment
      DOMAIN: ${DOMAIN}
      LDAP_ROOT: root
      LDAP_BIND_USER: auth
      FILE__LDAP_CONFIG_PASSWORD: /run/secrets/ldap_db
      FILE__LDAP_ROOT_PASSWORD: /run/secrets/ldap_db
      FILE__LDAP_BIND_PASSWORD: /run/secrets/ldap_auth
    volumes:
      - ldap:/config:z
    secrets:
      - ldap_auth
      - ldap_db
    ulimits:
      nofile: 1024

  nextcloud:
    <<: *default_service
    image: linuxserver/nextcloud:${NEXTCLOUD}
    container_name: nextcloud
    depends_on:
      - nextcloud-db
    networks:
      - egress
      - auth
      - mail
      - nextcloud_db
      - proxy
    volumes:
      - nextcloud:/config:z
      - ${VOLUME_NEXTCLOUD}:/data:z
      - ${VOLUME_MEDIA}:/media:z
      - ${VOLUME_POOL}:/pool:z
      - ${VOLUME_SYNC}:/sync:z
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`cloud.${DOMAIN}`)"
      - "traefik.http.routers.nextcloud.entryPoints=https"
      - "traefik.http.routers.nextcloud.middlewares=secured,nextcloud"
      - "traefik.http.services.nextcloud.loadBalancer.server.port=443"
      - "traefik.http.services.nextcloud.loadBalancer.server.scheme=https"
      - "traefik.http.middlewares.nextcloud.redirectRegex.regex=https://(.*)/.well-known/(card|cal)dav"
      - "traefik.http.middlewares.nextcloud.redirectRegex.replacement=https://$$1/remote.php/dav/"

  nextcloud-db:
    <<: *default_service
    image: linuxserver/mariadb:${MARIADB}
    container_name: nextcloud-db
    networks:
      - nextcloud_db
    environment:
      <<: *default_service_environment
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud
      FILE__MYSQL_PASSWORD: /run/secrets/nextcloud_db
      FILE__MYSQL_ROOT_PASSWORD: /run/secrets/nextcloud_db
    volumes:
      - nextcloud_db:/config:z
    secrets:
      - nextcloud_db
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  plex:
    <<: *default_service
    image: linuxserver/plex:${PLEX}
    container_name: plex
    networks:
      - proxy
    deploy:
      resources:
        limits:
          memory: 8G
    volumes:
      - plex:/config:z
      - ${VOLUME_MEDIA}:/data:z
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`media.${DOMAIN}`)"
      - "traefik.http.routers.plex.entryPoints=https"
      - "traefik.http.routers.plex.middlewares=secured"
      - "traefik.http.services.plex.loadBalancer.server.port=32400"

  proton-bridge:
    <<: *default_service
    image: atlas/proton-bridge:${PROTON_BRIDGE}
    build: ./images/proton-bridge
    container_name: proton-bridge
    networks:
      - egress
      - mail
    ports:
      - "25:25"
    environment:
      <<: *default_service_environment
      FILE__PROTONMAIL_ADDRESS: /run/secrets/protonmail_address
      FILE__PROTONMAIL_PASSWORD: /run/secrets/protonmail_password
      FILE__PROTONMAIL_PASSWORD_MAILBOX: /run/secrets/protonmail_password_mailbox
    volumes:
      - proton-bridge:/config:z
    secrets:
      - protonmail_address
      - protonmail_password
      - protonmail_password_mailbox

  syncthing:
    <<: *default_service
    image: linuxserver/syncthing:${SYNCTHING}
    container_name: syncthing
    networks:
      - egress
      - proxy
    volumes:
      - syncthing:/config:z
      - ${VOLUME_SYNC}:/data1:z
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.syncthing.rule=Host(`syncthing.${DOMAIN}`)"
      - "traefik.http.routers.syncthing.entryPoints=https"
      - "traefik.http.routers.syncthing.middlewares=securedAuth"
      - "traefik.http.services.syncthing.loadBalancer.server.port=8384"
      - "traefik.tcp.routers.syncthing.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.syncthing.entryPoints=syncthing"
      - "traefik.tcp.services.syncthing.loadBalancer.server.port=22000"

  teamspeak:
    <<: *default_service
    image: teamspeak:${TEAMSPEAK}
    container_name: teamspeak
    depends_on:
      - teamspeak-db
    networks:
      - proxy
      - teamspeak_db
    environment:
      <<: *default_service_environment
      TS3SERVER_DB_PLUGIN: ts3db_mariadb
      TS3SERVER_DB_SQLCREATEPATH: create_mariadb
      TS3SERVER_DB_HOST: teamspeak-db
      TS3SERVER_DB_USER: teamspeak
      TS3SERVER_DB_PASSWORD_FILE: /run/secrets/teamspeak_db
      TS3SERVER_DB_NAME: teamspeak
      TS3SERVER_DB_WAITUNTILREADY: 30
      TS3SERVER_LICENSE: accept
    volumes:
      - teamspeak:/var/ts3server:z
    secrets:
      - teamspeak_db
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.tcp.routers.teamspeak.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.teamspeak.entryPoints=teamspeakFileTransfer"
      - "traefik.tcp.services.teamspeak.loadBalancer.server.port=30033"
      - "traefik.udp.routers.teamspeak.entryPoints=teamspeakVoice"
      - "traefik.udp.services.teamspeak.loadBalancer.server.port=9987"

  teamspeak-db:
    <<: *default_service
    image: linuxserver/mariadb:${MARIADB}
    container_name: teamspeak-db
    networks:
      - teamspeak_db
    environment:
      <<: *default_service_environment
      MYSQL_DATABASE: teamspeak
      MYSQL_USER: teamspeak
      FILE__MYSQL_PASSWORD: /run/secrets/teamspeak_db
      FILE__MYSQL_ROOT_PASSWORD: /run/secrets/teamspeak_db
    volumes:
      - teamspeak_db:/config:z
    secrets:
      - teamspeak_db
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  traefik:
    <<: *default_service
    image: traefik:${TRAEFIK}
    container_name: traefik
    depends_on:
      atlas-init:
        condition: service_completed_successfully
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.network=proxy"
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      - "--entryPoints.http=true"
      - "--entryPoints.http.address=:8080"
      - "--entryPoints.http.forwardedHeaders.insecure=false"
      - "--entryPoints.http.proxyProtocol.insecure=true" # TODO false
      - "--entryPoints.https=true"
      - "--entryPoints.https.address=:8443"
      - "--entryPoints.https.http.tls=true"
      - "--entryPoints.https.http.tls.certResolver=le"
      - "--entryPoints.https.http.tls.domains[0].main=${DOMAIN}"
      - "--entryPoints.https.http.tls.domains[0].sans=*.${DOMAIN}"
      - "--entryPoints.https.forwardedHeaders.insecure=false"
      - "--entryPoints.https.proxyProtocol.insecure=true" # TODO false
      - "--entryPoints.teamspeakVoice.address=:9987/udp"
      - "--entryPoints.teamspeakFileTransfer.address=:30033"
      - "--entryPoints.syncthing.address=:22000"
      - "--certificatesResolvers.le.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.le.acme.storage=/config/acme.json"
      - "--serversTransport.insecureSkipVerify=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entrypoint=http"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
    networks:
      - ingress
      - proxy
    ports:
      - "80:8080"
      - "443:8443"
      - "9987:9987/udp"
      - "22000:22000"
      - "30033:30033"
    environment:
      <<: *default_service_environment
      CF_DNS_API_TOKEN_FILE: /run/secrets/cloudflare
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik:/config:z
    secrets:
      - cloudflare
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      # Middlewares.
      # Https only.
      - "traefik.http.middlewares.httpsOnly.redirectScheme.scheme=https"
      - "traefik.http.middlewares.httpsOnly.redirectScheme.permanent=true"
      # Rate limit.
      - "traefik.http.middlewares.rateLimit.rateLimit.average=100"
      - "traefik.http.middlewares.rateLimit.rateLimit.burst=50"
      # Secure headers.
      - "traefik.http.middlewares.secureHeaders.headers.accessControlAllowMethods=GET,OPTIONS,PUT"
      - "traefik.http.middlewares.secureHeaders.headers.accessControlAllowOriginList=https://${DOMAIN}"
      - "traefik.http.middlewares.secureHeaders.headers.accessControlMaxAge=100"
      - "traefik.http.middlewares.secureHeaders.headers.addVaryHeader=true"
      # - "traefik.http.middlewares.secureHeaders.headers.allowedHosts=traefik.${DOMAIN}"
      - "traefik.http.middlewares.secureHeaders.headers.hostsProxyHeaders=X-Forwarded-Host"
      - "traefik.http.middlewares.secureHeaders.headers.sslProxyHeaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.secureHeaders.headers.stsSeconds=63072000"
      - "traefik.http.middlewares.secureHeaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secureHeaders.headers.stsPreload=true"
      - "traefik.http.middlewares.secureHeaders.headers.forceSTSHeader=true"
      # - "traefik.http.middlewares.secureHeaders.headers.frameDeny=true"
      - "traefik.http.middlewares.secureHeaders.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.middlewares.secureHeaders.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.secureHeaders.headers.browserXssFilter=true"
      # - "traefik.http.middlewares.secureHeaders.headers.contentSecurityPolicy=frame-ancestors 'none'; object-src 'none'; base-uri 'none';"
      - "traefik.http.middlewares.secureHeaders.headers.referrerPolicy=same-origin"
      - "traefik.http.middlewares.secureHeaders.headers.permissionsPolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
      - "traefik.http.middlewares.secureHeaders.headers.customResponseHeaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,"
      # SSO.
      - "traefik.http.middlewares.sso.forwardAuth.address=http://authelia:9091/api/verify?rd=https%3A%2F%2Fsso.${DOMAIN}%2F"
      - "traefik.http.middlewares.sso.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email"
      - "traefik.http.middlewares.sso.forwardAuth.trustForwardHeader=true"
      # Chains.
      - "traefik.http.middlewares.secured.chain.middlewares=rateLimit,httpsOnly,secureHeaders"
      - "traefik.http.middlewares.securedAuth.chain.middlewares=secured,sso"

  udpxy:
    <<: *default_service
    image: atlas/udpxy:${UDPXY}
    build: ./images/udpxy
    container_name: udpxy
    network_mode: host

  watchtower:
    <<: *default_service
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - egress
    environment:
      <<: *default_service_environment
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_RESTARTING: "true"
      WATCHTOWER_LABEL_ENABLE: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "true"
      WATCHTOWER_NOTIFICATIONS_LEVEL: error
      WATCHTOWER_SCHEDULE: 0 0 6 * * *
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  www:
    <<: *default_service
    image: atlas/www:${WWW}
    build: ./images/www
    container_name: www
    networks:
      - proxy
    environment:
      <<: *default_service_environment
      NGINX_ENTRYPOINT_QUIET_LOGS: "true"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.www.rule=Host(`${DOMAIN}`, `www.${DOMAIN}`)"
      - "traefik.http.routers.www.entryPoints=https"
      - "traefik.http.routers.www.middlewares=secured"
      - "traefik.http.services.www.loadBalancer.server.port=8080"

  #
  # Backup.
  #

  restic:
    <<: *default_service
    image: atlas/restic:${RESTIC}
    build: ./images/restic
    container_name: restic
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    networks:
      - egress
    environment:
      <<: *default_service_environment
      RESTIC_REPOSITORY: <empty>
      RESTIC_SCHEDULE: 30 3 * * *
      RESTIC_BACKUP_TAGS: auto
      RESTIC_FORGET_ARGS: --prune --keep-daily 7 --keep-weekly 4 --keep-monthly 3 --keep-yearly 1
      FILE__B2_ACCOUNT_ID: /run/secrets/backblaze_id
      FILE__B2_ACCOUNT_KEY: /run/secrets/backblaze_key
      FILE__RESTIC_PASSWORD: /run/secrets/restic
    volumes:
      - restic:/config:z
      # Volumes
      - authelia_db_backup:/data/authelia_db:z
      - nextcloud:/data/nextcloud:z
      - nextcloud_db_backup:/data/nextcloud_db:z
      - ldap_backup:/data/ldap:z
      - plex:/data/plex:z
      - proton-bridge:/data/proton-bridge:z
      - syncthing:/data/syncthing:z
      - teamspeak:/data/teamspeak:z
      - teamspeak_db_backup:/data/teamspeak_db:z
      # Data
      - ${VOLUME_ROOT}:/data/data:z
    secrets:
      - backblaze_id
      - backblaze_key
      - restic

  authelia-db-backup:
    <<: *default_service
    image: atlas/db-backup:${DB_BACKUP}
    build: ./images/db-backup
    container_name: authelia-db-backup
    networks:
      - authelia_db
    environment:
      <<: *default_service_environment
      DB_BACKUP_SCHEDULE: 00 2 * * *
      DB_HOST: authelia-db
      DB_USER: authelia
      DB_NAME: authelia
      FILE__DB_PASSWORD: /run/secrets/authelia_db
    volumes:
      - authelia_db_backup:/config:z
    secrets:
      - authelia_db

  nextcloud-db-backup:
    <<: *default_service
    image: atlas/db-backup:${DB_BACKUP}
    build: ./images/db-backup
    container_name: nextcloud-db-backup
    networks:
      - nextcloud_db
    environment:
      <<: *default_service_environment
      DB_BACKUP_SCHEDULE: 00 2 * * *
      DB_HOST: nextcloud-db
      DB_USER: nextcloud
      DB_NAME: nextcloud
      FILE__DB_PASSWORD: /run/secrets/nextcloud_db
    volumes:
      - nextcloud_db_backup:/config:z
    secrets:
      - nextcloud_db

  teamspeak-db-backup:
    <<: *default_service
    image: atlas/db-backup:${DB_BACKUP}
    build: ./images/db-backup
    container_name: teamspeak-db-backup
    networks:
      - teamspeak_db
    environment:
      <<: *default_service_environment
      DB_BACKUP_SCHEDULE: 00 2 * * *
      DB_HOST: teamspeak-db
      DB_USER: teamspeak
      DB_NAME: teamspeak
      FILE__DB_PASSWORD: /run/secrets/teamspeak_db
    volumes:
      - teamspeak_db_backup:/config:z
    secrets:
      - teamspeak_db

  ldap-backup:
    <<: *default_service
    image: atlas/ldap-backup:${LDAP_BACKUP}
    build: ./images/ldap-backup
    container_name: ldap-backup
    networks:
      - auth
    environment:
      <<: *default_service_environment
      LDAP_BACKUP_SCHEDULE: 30 2 * * *
      DOMAIN: ${DOMAIN}
      LDAP_HOST: ldap
      LDAP_NAME: ldap
      LDAP_BIND_USER: auth
      FILE__LDAP_BIND_PASSWORD: /run/secrets/ldap_auth
    volumes:
      - ldap_backup:/config:z
    secrets:
      - ldap_auth

volumes:
  authelia:
  authelia_db:
  authelia_db_backup:
  ldap:
  ldap_backup:
  nextcloud:
  nextcloud_db:
  nextcloud_db_backup:
  plex:
  proton-bridge:
  restic:
  syncthing:
  teamspeak:
  teamspeak_db:
  teamspeak_db_backup:
  traefik:

networks:
  ingress:
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: "fd00:d0ce:1000::/64"
  egress:
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: "fd00:d0ce:2000::/64"
  # Internal networks.
  auth:
    <<: *internal_network
  mail:
    <<: *internal_network
  proxy:
    <<: *internal_network
    name: proxy
  # Database networks.
  authelia_db:
    <<: *internal_network
  nextcloud_db:
    <<: *internal_network
  teamspeak_db:
    <<: *internal_network

secrets:
  authelia_db:
    file: ./secrets/authelia_db
  authelia_identity_hmac:
    file: ./secrets/authelia_identity_hmac
  authelia_identity_key:
    file: ./secrets/authelia_identity_key
  authelia_jwt:
    file: ./secrets/authelia_jwt
  authelia_session:
    file: ./secrets/authelia_session
  authelia_storage:
    file: ./secrets/authelia_storage
  backblaze_id:
    file: ./secrets/backblaze_id
  backblaze_key:
    file: ./secrets/backblaze_key
  cloudflare:
    file: ./secrets/cloudflare
  inadyn:
    file: ./secrets/inadyn
  ldap_auth:
    file: ./secrets/ldap_auth
  ldap_db:
    file: ./secrets/ldap_db
  nextcloud_db:
    file: ./secrets/nextcloud_db
  protonmail_address:
    file: ./secrets/protonmail_address
  protonmail_password:
    file: ./secrets/protonmail_password
  protonmail_password_bridge:
    file: ./secrets/protonmail_password_bridge
  protonmail_password_mailbox:
    file: ./secrets/protonmail_password_mailbox
  restic:
    file: ./secrets/restic
  teamspeak_db:
    file: ./secrets/teamspeak_db
